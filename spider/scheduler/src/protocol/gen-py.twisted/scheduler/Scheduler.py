#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted
#

from thrift.Thrift import TType, TMessageType, TException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None

from zope.interface import Interface, implements
from twisted.internet import defer
from thrift.transport import TTwisted

class Iface(Interface):
  def ping():
    pass

  def do_register(spiderid):
    """
    Parameters:
     - spiderid
    """
    pass

  def do_unregister(spiderid):
    """
    Parameters:
     - spiderid
    """
    pass

  def get_seeds(spiderid, last_pkg, report):
    """
    if the spider is unregisted,
         master will do auto registration
    spider reports its last job info to master

    Parameters:
     - spiderid
     - last_pkg
     - report
    """
    pass

  def add_seeds(clientid, pkg):
    """
    Parameters:
     - clientid
     - pkg
    """
    pass

  def get_latency_time(spiderid, url):
    """
    Parameters:
     - spiderid
     - url
    """
    pass


class Client:
  implements(Iface)

  def __init__(self, transport, oprot_factory):
    self._transport = transport
    self._oprot_factory = oprot_factory
    self._seqid = 0
    self._reqs = {}

  def ping(self, ):
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_ping()
    return d

  def send_ping(self, ):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
    args = ping_args()
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_ping(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = ping_result()
    result.read(iprot)
    iprot.readMessageEnd()
    return d.callback(None)

  def do_register(self, spiderid):
    """
    Parameters:
     - spiderid
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_do_register(spiderid)
    return d

  def send_do_register(self, spiderid):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('do_register', TMessageType.CALL, self._seqid)
    args = do_register_args()
    args.spiderid = spiderid
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_do_register(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = do_register_result()
    result.read(iprot)
    iprot.readMessageEnd()
    return d.callback(None)

  def do_unregister(self, spiderid):
    """
    Parameters:
     - spiderid
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_do_unregister(spiderid)
    return d

  def send_do_unregister(self, spiderid):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('do_unregister', TMessageType.CALL, self._seqid)
    args = do_unregister_args()
    args.spiderid = spiderid
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_do_unregister(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = do_unregister_result()
    result.read(iprot)
    iprot.readMessageEnd()
    return d.callback(None)

  def get_seeds(self, spiderid, last_pkg, report):
    """
    if the spider is unregisted,
         master will do auto registration
    spider reports its last job info to master

    Parameters:
     - spiderid
     - last_pkg
     - report
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_get_seeds(spiderid, last_pkg, report)
    return d

  def send_get_seeds(self, spiderid, last_pkg, report):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_seeds', TMessageType.CALL, self._seqid)
    args = get_seeds_args()
    args.spiderid = spiderid
    args.last_pkg = last_pkg
    args.report = report
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_seeds(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_seeds_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.err is not None:
      return d.errback(result.err)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_seeds failed: unknown result"))

  def add_seeds(self, clientid, pkg):
    """
    Parameters:
     - clientid
     - pkg
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_add_seeds(clientid, pkg)
    return d

  def send_add_seeds(self, clientid, pkg):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('add_seeds', TMessageType.CALL, self._seqid)
    args = add_seeds_args()
    args.clientid = clientid
    args.pkg = pkg
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_add_seeds(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = add_seeds_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.err is not None:
      return d.errback(result.err)
    return d.callback(None)

  def get_latency_time(self, spiderid, url):
    """
    Parameters:
     - spiderid
     - url
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_get_latency_time(spiderid, url)
    return d

  def send_get_latency_time(self, spiderid, url):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_latency_time', TMessageType.CALL, self._seqid)
    args = get_latency_time_args()
    args.spiderid = spiderid
    args.url = url
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_latency_time(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_latency_time_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_latency_time failed: unknown result"))


class Processor(TProcessor):
  implements(Iface)

  def __init__(self, handler):
    self._handler = Iface(handler)
    self._processMap = {}
    self._processMap["ping"] = Processor.process_ping
    self._processMap["do_register"] = Processor.process_do_register
    self._processMap["do_unregister"] = Processor.process_do_unregister
    self._processMap["get_seeds"] = Processor.process_get_seeds
    self._processMap["add_seeds"] = Processor.process_add_seeds
    self._processMap["get_latency_time"] = Processor.process_get_latency_time

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return defer.succeed(None)
    else:
      return self._processMap[name](self, seqid, iprot, oprot)

  def process_ping(self, seqid, iprot, oprot):
    args = ping_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ping_result()
    d = defer.maybeDeferred(self._handler.ping, )
    d.addCallback(self.write_results_success_ping, result, seqid, oprot)
    return d

  def write_results_success_ping(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("ping", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_do_register(self, seqid, iprot, oprot):
    args = do_register_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = do_register_result()
    d = defer.maybeDeferred(self._handler.do_register, args.spiderid)
    d.addCallback(self.write_results_success_do_register, result, seqid, oprot)
    return d

  def write_results_success_do_register(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("do_register", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_do_unregister(self, seqid, iprot, oprot):
    args = do_unregister_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = do_unregister_result()
    d = defer.maybeDeferred(self._handler.do_unregister, args.spiderid)
    d.addCallback(self.write_results_success_do_unregister, result, seqid, oprot)
    return d

  def write_results_success_do_unregister(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("do_unregister", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_seeds(self, seqid, iprot, oprot):
    args = get_seeds_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_seeds_result()
    d = defer.maybeDeferred(self._handler.get_seeds, args.spiderid, args.last_pkg, args.report)
    d.addCallback(self.write_results_success_get_seeds, result, seqid, oprot)
    d.addErrback(self.write_results_exception_get_seeds, result, seqid, oprot)
    return d

  def write_results_success_get_seeds(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_seeds", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_get_seeds(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServerError, err:
      result.err = err
    oprot.writeMessageBegin("get_seeds", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_add_seeds(self, seqid, iprot, oprot):
    args = add_seeds_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = add_seeds_result()
    d = defer.maybeDeferred(self._handler.add_seeds, args.clientid, args.pkg)
    d.addCallback(self.write_results_success_add_seeds, result, seqid, oprot)
    d.addErrback(self.write_results_exception_add_seeds, result, seqid, oprot)
    return d

  def write_results_success_add_seeds(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("add_seeds", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_add_seeds(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except ServerError, err:
      result.err = err
    oprot.writeMessageBegin("add_seeds", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_latency_time(self, seqid, iprot, oprot):
    args = get_latency_time_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_latency_time_result()
    d = defer.maybeDeferred(self._handler.get_latency_time, args.spiderid, args.url)
    d.addCallback(self.write_results_success_get_latency_time, result, seqid, oprot)
    return d

  def write_results_success_get_latency_time(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_latency_time", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class ping_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ping_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class do_register_args:
  """
  Attributes:
   - spiderid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'spiderid', None, None, ), # 1
  )

  def __init__(self, spiderid=None,):
    self.spiderid = spiderid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.spiderid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('do_register_args')
    if self.spiderid is not None:
      oprot.writeFieldBegin('spiderid', TType.STRING, 1)
      oprot.writeString(self.spiderid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class do_register_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('do_register_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class do_unregister_args:
  """
  Attributes:
   - spiderid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'spiderid', None, None, ), # 1
  )

  def __init__(self, spiderid=None,):
    self.spiderid = spiderid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.spiderid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('do_unregister_args')
    if self.spiderid is not None:
      oprot.writeFieldBegin('spiderid', TType.STRING, 1)
      oprot.writeString(self.spiderid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class do_unregister_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('do_unregister_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_seeds_args:
  """
  Attributes:
   - spiderid
   - last_pkg
   - report
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'spiderid', None, None, ), # 1
    (2, TType.STRUCT, 'last_pkg', (SeedsPackage, SeedsPackage.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'report', (JobReport, JobReport.thrift_spec), None, ), # 3
  )

  def __init__(self, spiderid=None, last_pkg=None, report=None,):
    self.spiderid = spiderid
    self.last_pkg = last_pkg
    self.report = report

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.spiderid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.last_pkg = SeedsPackage()
          self.last_pkg.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.report = JobReport()
          self.report.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_seeds_args')
    if self.spiderid is not None:
      oprot.writeFieldBegin('spiderid', TType.STRING, 1)
      oprot.writeString(self.spiderid)
      oprot.writeFieldEnd()
    if self.last_pkg is not None:
      oprot.writeFieldBegin('last_pkg', TType.STRUCT, 2)
      self.last_pkg.write(oprot)
      oprot.writeFieldEnd()
    if self.report is not None:
      oprot.writeFieldBegin('report', TType.STRUCT, 3)
      self.report.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_seeds_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (SeedsPackage, SeedsPackage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (ServerError, ServerError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = SeedsPackage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = ServerError()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_seeds_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class add_seeds_args:
  """
  Attributes:
   - clientid
   - pkg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientid', None, None, ), # 1
    (2, TType.STRUCT, 'pkg', (SeedsPackage, SeedsPackage.thrift_spec), None, ), # 2
  )

  def __init__(self, clientid=None, pkg=None,):
    self.clientid = clientid
    self.pkg = pkg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.pkg = SeedsPackage()
          self.pkg.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_seeds_args')
    if self.clientid is not None:
      oprot.writeFieldBegin('clientid', TType.STRING, 1)
      oprot.writeString(self.clientid)
      oprot.writeFieldEnd()
    if self.pkg is not None:
      oprot.writeFieldBegin('pkg', TType.STRUCT, 2)
      self.pkg.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class add_seeds_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (ServerError, ServerError.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = ServerError()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_seeds_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_latency_time_args:
  """
  Attributes:
   - spiderid
   - url
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'spiderid', None, None, ), # 1
    (2, TType.STRING, 'url', None, None, ), # 2
  )

  def __init__(self, spiderid=None, url=None,):
    self.spiderid = spiderid
    self.url = url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.spiderid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_latency_time_args')
    if self.spiderid is not None:
      oprot.writeFieldBegin('spiderid', TType.STRING, 1)
      oprot.writeString(self.spiderid)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 2)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_latency_time_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_latency_time_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
